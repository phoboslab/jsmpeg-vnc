# Set the body class to show/hide certain elements on mobile/desktop
document.body.className = if 'ontouchstart' of window then 'mobile' else 'desktop'
# Setup the WebSocket connection and start the player
client = new WebSocket((if window.location.protocol == 'https:' then 'wss://' else 'ws://') + window.location.host + '/ws')
canvas = document.getElementById('videoCanvas')
player = new jsmpeg(client, canvas: canvas)
# Input
mouseLock = ! !document.location.href.match('mouselock')
lastMouse = 
  x: 0
  y: 0
if mouseLock
  # FUCK YEAH, VENDOR PREFIXES. LOVE EM!
  canvas.requestPointerLock = canvas.requestPointerLock or canvas.mozRequestPointerLock or canvas.webkitRequestPointerLock or ->
# enum input_type_t
INPUT_KEY = 0x0001
INPUT_MOUSE_BUTTON = 0x0002
INPUT_MOUSE_ABSOLUTE = 0x0004
INPUT_MOUSE_RELATIVE = 0x0008
KEY_DOWN = 0x01
KEY_UP = 0x00
MOUSE_1_DOWN = 0x0002
MOUSE_1_UP = 0x0004
MOUSE_2_DOWN = 0x0008
MOUSE_2_UP = 0x0010
# struct input_key_t { uint16 type, uint16 state; uint16 key_code; }

sendKey = (ev, action, key) ->
  client.send new Uint16Array([
    INPUT_KEY
    action
    key
  ])
  ev.preventDefault()
  return

# struct input_mouse_t { uint16 type, uint16 flags; float32 x; float32 y; }
mouseDataBuffer = new ArrayBuffer(12)
mouseDataTypeFlags = new Uint16Array(mouseDataBuffer, 0)
mouseDataCoords = new Float32Array(mouseDataBuffer, 4)

sendMouse = (ev, action) ->
  `var p`
  `var x`
  `var y`
  type = 0
  x = undefined
  y = undefined
  if action
    type |= INPUT_MOUSE_BUTTON
    # Attempt to lock pointer at mouse1 down
    if mouseLock and action == MOUSE_1_DOWN
      canvas.requestPointerLock()
  # Only make relative mouse movements if no button is pressed
  if !action and mouseLock
    type |= INPUT_MOUSE_RELATIVE
    p = if ev.changedTouches then ev.changedTouches[0] else ev
    # FUCK, DID I MENTION I LOOOOOVE VENDOR PREFIXES? SO USEFUL!
    x = p.movementX or p.mozMovementX or p.webkitMovementX
    y = p.movementY or p.mozMovementY or p.webkitMovementY
    if typeof x == 'undefined'
      x = p.clientX - (lastMouse.x)
      y = p.clientY - (lastMouse.y)
    lastMouse.x = p.clientX
    lastMouse.y = p.clientY
  # If we send absoulte mouse coords, we can always do so, even for
  # button presses.
  if !mouseLock
    type |= INPUT_MOUSE_ABSOLUTE
    rect = canvas.getBoundingClientRect()
    scaleX = canvas.width / (rect.right - (rect.left))
    scaleY = canvas.height / (rect.bottom - (rect.top))
    p = if ev.changedTouches then ev.changedTouches[0] else ev
    x = (p.clientX - (rect.left)) * scaleX
    y = (p.clientY - (rect.top)) * scaleY
  mouseDataTypeFlags[0] = type
  mouseDataTypeFlags[1] = action or 0
  mouseDataCoords[0] = x
  mouseDataCoords[1] = y
  client.send mouseDataBuffer
  ev.preventDefault()
  return

# Keyboard
window.addEventListener 'keydown', ((ev) ->
  sendKey ev, KEY_DOWN, ev.keyCode
  return
), false
window.addEventListener 'keyup', ((ev) ->
  sendKey ev, KEY_UP, ev.keyCode
  return
), false
# Mouse
canvas.addEventListener 'mousemove', ((ev) ->
  sendMouse ev, null
  return
), false
canvas.addEventListener 'mousedown', ((ev) ->
  sendMouse ev, if ev.button == 2 then MOUSE_2_DOWN else MOUSE_1_DOWN
  return
), false
canvas.addEventListener 'mouseup', ((ev) ->
  sendMouse ev, if ev.button == 2 then MOUSE_2_UP else MOUSE_1_UP
  return
), false
# Touch
canvas.addEventListener 'touchstart', ((ev) ->
  lastMouse.x = ev.changedTouches[0].clientX
  lastMouse.y = ev.changedTouches[0].clientY
  sendMouse ev, MOUSE_1_DOWN
  return
), false
canvas.addEventListener 'touchend', ((ev) ->
  sendMouse ev, MOUSE_1_UP
  return
), false
canvas.addEventListener 'touchmove', ((ev) ->
  sendMouse ev, null
  return
), false
# Touch buttons emulating keyboard keys

defineTouchButton = (element, keyCode) ->
  element.addEventListener 'touchstart', ((ev) ->
    sendKey ev, KEY_DOWN, keyCode
    return
  ), false
  element.addEventListener 'touchend', ((ev) ->
    sendKey ev, KEY_UP, keyCode
    return
  ), false
  return

touchKeys = document.querySelectorAll('.key')
i = 0
while i < touchKeys.length
  defineTouchButton touchKeys[i], touchKeys[i].dataset.code
  i++

# ---
# generated by js2coffee 2.2.0